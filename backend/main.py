import jwt
import os
import bcrypt
import uvicorn
import pypandoc
import firebase_admin # type: ignore
import traceback
from fastapi.responses import StreamingResponse
from datetime import datetime, timedelta
from fastapi.middleware.cors import CORSMiddleware
from AutoReportX import run_gradio, create_word_file, create_pdf_file #Import h√†nm t·ª´ AutoReportX
from fastapi import FastAPI, HTTPException, Depends, Request 
from pymongo import MongoClient, ReturnDocument
from pydantic import BaseModel
from dotenv import load_dotenv
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from firebase_admin import auth, credentials # type: ignore

#--------------------------------------------------------------------------------

# X√≥a app c≈© n·∫øu t·ªìn t·∫°i
if firebase_admin._DEFAULT_APP_NAME in firebase_admin._apps:
    firebase_admin.delete_app(firebase_admin.get_app())

# T·∫£i pandoc t√≠ch h·ª£p s·∫µn
pypandoc.download_pandoc()

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# Kh·ªüi t·∫°o FastAPI
app = FastAPI()

# L·∫•y ƒë∆∞·ªùng d·∫´n t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
firebase_cred_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")

if not firebase_cred_path:
    raise ValueError("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_APPLICATION_CREDENTIALS!")

# Kh·ªüi t·∫°o Firebase Admin SDK
cred = credentials.Certificate(firebase_cred_path)
firebase_admin.initialize_app(cred)

# Th√™m v√†o startup
print("üî• Kh·ªüi t·∫°o Firebase...")
print(f"üîπ Path: {firebase_cred_path}")
print(f"üîπ App: {firebase_admin.get_app().name}")

# Schema nh·∫≠n token t·ª´ frontend
class GoogleLoginRequest(BaseModel):
    token: str

# C·∫•u h√¨nh CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["*"]
)

# K·∫øt n·ªëi MongoDB
MONGO_URI = os.getenv("MONGO_URI")
if not MONGO_URI:
    raise ValueError("MONGO_URI kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong bi·∫øn m√¥i tr∆∞·ªùng!")

try:
    client = MongoClient(MONGO_URI)
    db = client["mydatabase"]
    users_collection = db["users"]
    collection = db["reports"]
except Exception as e:
    raise ValueError(f"L·ªói k·∫øt n·ªëi MongoDB: {e}")

# ALGORITHM
ALGORITHM = "HS256"

# Load SECRET_KEY
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("SECRET_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong bi·∫øn m√¥i tr∆∞·ªùng!")

# Schema d·ªØ li·ªáu ng∆∞·ªùi d√πng
class UserRegister(BaseModel):
    fullname: str
    email: str
    username: str
    password: str

class UserLogin(BaseModel):
    username: str
    password: str

# H√†m hash password
def hash_password(password: str) -> str:
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

# H√†m ki·ªÉm tra password
def verify_password(plain_password: str, hashed_password: str) -> bool:
    try:
        print("üîπ Ki·ªÉm tra m·∫≠t kh·∫©u:", plain_password)
        print("üîπ M·∫≠t kh·∫©u hash:", hashed_password)

        # Ki·ªÉm tra xem hashed_password c√≥ b·ªã m·∫•t k√Ω t·ª± kh√¥ng
        if not hashed_password.startswith("$2b$"):
            print("‚ö†Ô∏è M·∫≠t kh·∫©u hash kh√¥ng h·ª£p l·ªá!")
            return False

        result = bcrypt.checkpw(plain_password.encode('utf-8'), hashed_password.encode('utf-8'))
        print("üîπ K·∫øt qu·∫£ ki·ªÉm tra:", result)
        return result
    except Exception as e:
        print("‚ùå L·ªói khi ki·ªÉm tra m·∫≠t kh·∫©u:", e)
        return False


# H√†m t·∫°o JWT token
def create_token(data: dict, expires_delta: timedelta = timedelta(hours=1)):
    to_encode = data.copy()
    expire = datetime.utcnow() + expires_delta
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm="HS256")


# API ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
@app.post("/auth/register")
async def register(user: UserRegister):
    print("D·ªØ li·ªáu t·ª´ frontend:", user.dict())  # In d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ frontend

    # Ki·ªÉm tra email v√† username ƒë√£ t·ªìn t·∫°i ch∆∞a
    if users_collection.find_one({"email": user.email}):
        raise HTTPException(status_code=400, detail="Email ƒë√£ t·ªìn t·∫°i!")
    if users_collection.find_one({"username": user.username}):
        raise HTTPException(status_code=400, detail="Username ƒë√£ t·ªìn t·∫°i!")

    # BƒÉm m·∫≠t kh·∫©u
    hashed_password = hash_password(user.password)
    
    new_user = {
        "fullname": user.fullname,
        "email": user.email,
        "username": user.username,
        "password": hashed_password,
    }
    users_collection.insert_one(new_user)
    
    # T·∫°o Token ngay sau khi ƒëƒÉng k√Ω
    token_data = {"username": user.username, "email": user.email}
    token = create_token(token_data)

    return {
        "message": "ƒêƒÉng k√Ω th√†nh c√¥ng!",
        "token": token,
        "username": user.username,
        "fullname": user.fullname,
    }


# API ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
@app.post("/auth/login")
async def login(user: UserLogin):
    
    #In d·ªØ li·ªáu nh·∫≠n t·ª´ frontend
    print("D·ªØ li·ªáu t·ª´ frontend:", user.dict()) 
    
    #T√¨m ng∆∞·ªùi d√πng trong s∆° s·ªü d·ªØ li·ªáu
    db_user = users_collection.find_one({"username": user.username})
    if not db_user or not verify_password(user.password, db_user["password"]):
        raise HTTPException(status_code=400, detail="Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!")

    # T·∫°o Token JWT
    token_data = {"username": db_user["username"], "email": db_user["email"]}
    token = create_token(token_data)

    # Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng v√† token
    return {
        "token": token,
        "username": db_user["username"],
        "fullname": db_user["fullname"],
    }
    
    
# Endpoint ki·ªÉm tra th√¥ng tin 
@app.get("/auth/check-user-by-email/{email}")
async def check_user_by_email(email: str):
    user = users_collection.find_one({"email": email})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

@app.get("/auth/check-user-by-uid/{uid}")
async def check_user_by_uid(uid: str):
    user = users_collection.find_one({"uid": uid})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user    
    
    
# Endpoint ƒëƒÉng nh·∫≠p Google
@app.post("/auth/google-login")
async def google_login(request: Request):
    try:
        data = await request.json()
        id_token = data.get("token")
        
        if not id_token:
            raise HTTPException(status_code=400, detail="Thi·∫øu token Google")

        # 1. X√°c th·ª±c v·ªõi Firebase
        decoded_token = auth.verify_id_token(id_token)
        uid = decoded_token["uid"]
        email = decoded_token.get("email")
        name = decoded_token.get("name", "Ng∆∞·ªùi d√πng Google")
        picture = decoded_token.get("picture", "")
        
        if not email:
            raise HTTPException(status_code=400, detail="Token kh√¥ng ch·ª©a email")

        # 2. T·∫°o/T√¨m user trong MongoDB (s·ª≠ d·ª•ng upsert)
        user_data = {
            "uid": uid,
            "email": email,
            "username": email.split("@")[0],  # T·∫°o username t·ª´ email
            "fullname": name,
            "photo": picture,
            "last_login": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }

        # S·ª≠ d·ª•ng find_one_and_update v·ªõi upsert
        result = users_collection.find_one_and_update(
            {"email": email},
            {
                "$set": user_data,
                "$setOnInsert": {
                    "created_at": datetime.utcnow(),
                    "roles": ["user"],
                    "password": ""  # Tr∆∞·ªùng password r·ªóng cho user Google
                }
            },
            upsert=True,
            return_document=ReturnDocument.AFTER
        )

        if not result:
            raise HTTPException(status_code=500, detail="Kh√¥ng th·ªÉ l∆∞u user v√†o database")

        # 3. T·∫°o JWT token
        token_data = {
            "sub": str(result["_id"]),
            "username": result["username"],
            "email": email,
            "exp": datetime.utcnow() + timedelta(days=1)
        }
        token = jwt.encode(token_data, SECRET_KEY, algorithm="HS256")

        return {
            "success": True,
            "token": token,
            "user": {
                "id": str(result["_id"]),
                "username": result["username"],
                "email": email,
                "fullname": name,
                "photo": picture
            }
        }

    except Exception as e:
        print(f"üî• L·ªói: {str(e)}")
        raise HTTPException(status_code=500, detail=f"L·ªói server: {str(e)}")
    

#Endpoint ki·ªÉm tra user
@app.get("/auth/debug/user/{email}")
async def debug_user(email: str):
    user = users_collection.find_one({"email": email})
    if not user:
        return {"error": "User not found"}
    return user


# C·∫•u h√¨nh OAuth2
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")


# H√†m gi·∫£i m√£ token
def decode_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("username")
        if username is None:
            raise HTTPException(status_code=401, detail="Invalid token")
        return username
    except JWTError as e:
        print("‚ùå L·ªói gi·∫£i m√£ token:", str(e))
        raise HTTPException(status_code=401, detail="Invalid token")
    

# API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
@app.get("/user/profile")
async def get_user_profile(token: str = Depends(oauth2_scheme)):
    # Gi·∫£i m√£ token ƒë·ªÉ l·∫•y username
    username = decode_token(token)
    
    # T√¨m th√¥ng tin trong MongoDB
    user = users_collection.find_one({"username": username})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    # Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
    return {
        "fullname": user.get("fullname", ""),
        "email": user.get("email", ""),
        "username": user.get("username", "")
    }

# API c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
from fastapi import Request

@app.put("/user/profile")
async def update_user_profile(request: Request, token: str = Depends(oauth2_scheme)):
    try:
        username = decode_token(token)
        user = users_collection.find_one({"username": username})
        if not user:
            raise HTTPException(status_code=404, detail="Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i")

        # Nh·∫≠n d·ªØ li·ªáu t·ª´ request JSON
        data = await request.json()
        fullname = data.get("fullname")
        email = data.get("email")
        password = data.get("password")

        update_data = {}
        if fullname:
            update_data["fullname"] = fullname
        if email:
            update_data["email"] = email
        if password:
            hashed_password = hash_password(password)
            print(f"üîπ DEBUG: M·∫≠t kh·∫©u m·ªõi (ch∆∞a hash): {password}")
            print(f"üîπ DEBUG: M·∫≠t kh·∫©u m·ªõi (ƒë√£ hash): {hashed_password}")
            update_data["password"] = hashed_password

        if update_data:
            print(f"üîπ DEBUG: D·ªØ li·ªáu c·∫≠p nh·∫≠t: {update_data}")
            users_collection.update_one({"username": username}, {"$set": update_data})
            print(f"‚úÖ DEBUG: C·∫≠p nh·∫≠t MongoDB th√†nh c√¥ng cho user {username}")

        return {"message": "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng"}
    except HTTPException as e:
        raise e
    except Exception as e:
        print("‚ùå L·ªói c·∫≠p nh·∫≠t:", e)
        raise HTTPException(status_code=500, detail="L·ªói server khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng")



# G·ªçi h√†m t·ª´ AutoReportX.py 
class QueryRequest(BaseModel):
    user_query: str
    iteration_limit: int = 1

@app.post("/predict/")
async def predict(request: QueryRequest):
    try:
        # G·ªçi h√†m t·ª´ AutoReportX.py
        result = run_gradio(request.user_query, request.iteration_limit)
        return {"data": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    
# ƒê·ªãnh nghƒ©a model cho request
class DownloadRequest(BaseModel):
    content: str
    file_type: str
    
@app.post("/download-report/")
async def download_report(request: DownloadRequest):
    try:
        print("Nh·∫≠n y√™u c·∫ßu t·∫£i file v·ªõi lo·∫°i:", request.file_type)
        
        if request.file_type == "doc":
            file_stream, filename = create_word_file(request.content)
            media_type = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        
        elif request.file_type == "pdf":
            file_stream, filename = create_pdf_file(request.content, 'report.pdf')
            media_type = "application/pdf"
        
        else:
            return {"error": "Lo·∫°i file kh√¥ng h·ª£p l·ªá. Ch·ªçn 'doc' ho·∫∑c 'pdf'."}

        return StreamingResponse(
            file_stream,
            media_type=media_type,
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
    except Exception as e:
        return {"error": f"L·ªói khi t·∫°o file: {str(e)}"}
    
    
if __name__ == "__main__": 
    # Ch·∫°y Server
    uvicorn.run(app, host="0.0.0.0", port=5000)